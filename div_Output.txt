------+-----------------+-------------+----+---------+------+-----------------------+-------------------------------------------------------------------
 Line | # File     Line | Line Type   | MX |  Reloc  | Size | Address   Object Code |  Source Code                                                      
------+-----------------+-------------+----+---------+------+-----------------------+-------------------------------------------------------------------
    1 |  1 div.s      1 | Comment     | 11 |         |    0 | 00/8000               | ;divisor = $58     ;$59 used for hi-byte
    2 |  1 div.s      2 | Comment     | 11 |         |    0 | 00/8000               | ;dividend = $fb	  ;$fc used for hi-byte
    3 |  1 div.s      3 | Comment     | 11 |         |    0 | 00/8000               | ;remainder = $fd	  ;$fe used for hi-byte
    4 |  1 div.s      4 | Comment     | 11 |         |    0 | 00/8000               | ;result = dividend ;save memory by reusing divident to store the result
    5 |  1 div.s      5 | Empty       | 11 |         |    0 | 00/8000               |                                  
    6 |  1 div.s      6 | Directive   | 11 |         |    0 | 00/8000               |             org   $800           
    7 |  1 div.s      7 | Empty       | 11 |         |    0 | 00/0800               |                                  
    8 |  1 div.s      8 | Code        | 11 |         |    2 | 00/0800 : A9 00       | divide      lda   #0             ;preset remainder to 0
    9 |  1 div.s      9 | Code        | 11 |         |    3 | 00/0802 : 8D 37 08    |             sta   remainder      
   10 |  1 div.s     10 | Code        | 11 |         |    3 | 00/0805 : 8D 38 08    |             sta   remainder+1    
   11 |  1 div.s     11 | Code        | 11 |         |    2 | 00/0808 : A2 10       |             ldx   #16            ;repeat for each bit: ...
   12 |  1 div.s     12 | Empty       | 11 |         |    0 | 00/080A               |                                  
   13 |  1 div.s     13 | Code        | 11 |         |    3 | 00/080A : 0E 35 08    | divloop     asl   dividend       ;dividend lb & hb*2, msb -> Carry
   14 |  1 div.s     14 | Code        | 11 |         |    3 | 00/080D : 2E 36 08    |             rol   dividend+1     
   15 |  1 div.s     15 | Code        | 11 |         |    3 | 00/0810 : 2E 37 08    |             rol   remainder      ;remainder lb & hb * 2 + msb from carry
   16 |  1 div.s     16 | Code        | 11 |         |    3 | 00/0813 : 2E 38 08    |             rol   remainder+1    
   17 |  1 div.s     17 | Code        | 11 |         |    3 | 00/0816 : AD 37 08    |             lda   remainder      
   18 |  1 div.s     18 | Code        | 11 |         |    1 | 00/0819 : 38          |             sec                  
   19 |  1 div.s     19 | Code        | 11 |         |    3 | 00/081A : ED 33 08    |             sbc   divisor        ;substract divisor to see if it fits in
   20 |  1 div.s     20 | Code        | 11 |         |    1 | 00/081D : A8          |             tay                  ;lb result -> Y, for we may need it later
   21 |  1 div.s     21 | Code        | 11 |         |    3 | 00/081E : AD 38 08    |             lda   remainder+1    
   22 |  1 div.s     22 | Code        | 11 |         |    3 | 00/0821 : ED 34 08    |             sbc   divisor+1      
   23 |  1 div.s     23 | Code        | 11 |         |    2 | 00/0824 : 90 09       |             bcc   skip           ;if carry=0 then divisor didn't fit in yet
   24 |  1 div.s     24 | Empty       | 11 |         |    0 | 00/0826               |                                  
   25 |  1 div.s     25 | Code        | 11 |         |    3 | 00/0826 : 8D 38 08    |             sta   remainder+1    ;else save substraction result as new remainder,
   26 |  1 div.s     26 | Code        | 11 |         |    3 | 00/0829 : 8C 37 08    |             sty   remainder      
   27 |  1 div.s     27 | Code        | 11 |         |    3 | 00/082C : EE 35 08    |             inc   {dividend}     ;and INCrement result cause divisor fit in 1 times
   28 |  1 div.s     28 | Empty       | 11 |         |    0 | 00/082F               |                                  
   29 |  1 div.s     29 | Code        | 11 |         |    1 | 00/082F : CA          | skip        dex                  
   30 |  1 div.s     30 | Code        | 11 |         |    2 | 00/0830 : D0 D8       |             bne   divloop        
   31 |  1 div.s     31 | Code        | 11 |         |    1 | 00/0832 : 60          |             rts                  
   32 |  1 div.s     32 | Empty       | 11 |         |    0 | 00/0833               |                                  
   33 |  1 div.s     33 | Empty       | 11 |         |    0 | 00/0833               |                                  
   34 |  1 div.s     34 | Data        | 11 |         |    2 | 00/0833 : 12 00       | divisor     dw    18             
   35 |  1 div.s     35 | Data        | 11 |         |    2 | 00/0835 : 10 00       | dividend    dw    16             
   36 |  1 div.s     36 | Data        | 11 |         |    2 | 00/0837 : 00 00       | remainder   dw    0              
   37 |  1 div.s     37 | Equivalence | 11 |         |    0 | 00/0839               | result      equ   dividend       
------+-----------------+-------------+----+---------+------+-----------------------+-------------------------------------------------------------------
